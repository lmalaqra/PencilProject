oneQueryQuestionSchema.pre("save", function (next) {
  const paths = this.modifiedPaths();
  console.log(paths);
  if (paths.includes("name")) {
    this.isDocUpdated = true;
  }

  next();
});

const OneQueryQyestion = mongoose.model(
  "OneQueryQuestion",
  oneQueryQuestionSchema
);

const oneQueryQuestionSchema = mongoose.Schema({
  number: { type: Number, unique: true },
  topics: [{ type: topicSchema, ordered: false }],
});

router.get("/one-questions", async (req, res) => {
  fs.createReadStream("./puplic/uploads/p.csv", { encoding: "utf-8" })
    .on("data", async (chunk) => {
      const questinos = await createQuestionDb(chunk, "one");
      res.json(questinos);
    })
    .on("error", (error) => {
      console.log(error);
    });
});
